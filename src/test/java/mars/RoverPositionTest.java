package mars;

import static org.junit.Assert.*;

import org.junit.Test;

public class RoverPositionTest {
	@Test
	public final void testMove() {
		RoverPosition posn = new RoverPosition(0, 0, Orientation.NORTH);
		RoverPosition newPosn = posn.move(0);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(posn, newPosn);
		newPosn = posn.move(1);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, 1, Orientation.NORTH), newPosn);
		newPosn = posn.move(2);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, 2, Orientation.NORTH), newPosn);
		newPosn = posn.move(-1);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, -1, Orientation.NORTH), newPosn);
		newPosn = posn.move(-2);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, -2, Orientation.NORTH), newPosn);

		posn = new RoverPosition(0, 0, Orientation.SOUTH);
		newPosn = posn.move(0);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(posn, newPosn);
		newPosn = posn.move(1);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, -1, Orientation.SOUTH), newPosn);
		newPosn = posn.move(2);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, -2, Orientation.SOUTH), newPosn);
		newPosn = posn.move(-1);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, 1, Orientation.SOUTH), newPosn);
		newPosn = posn.move(-2);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, 2, Orientation.SOUTH), newPosn);

		posn = new RoverPosition(0, 0, Orientation.EAST);
		newPosn = posn.move(0);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(posn, newPosn);
		newPosn = posn.move(1);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(1, 0, Orientation.EAST), newPosn);
		newPosn = posn.move(2);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(2, 0, Orientation.EAST), newPosn);
		newPosn = posn.move(-1);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(-1, 0, Orientation.EAST), newPosn);
		newPosn = posn.move(-2);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(-2, 0, Orientation.EAST), newPosn);

		posn = new RoverPosition(0, 0, Orientation.WEST);
		newPosn = posn.move(0);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(posn, newPosn);
		newPosn = posn.move(1);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(-1, 0, Orientation.WEST), newPosn);
		newPosn = posn.move(2);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(-2, 0, Orientation.WEST), newPosn);
		newPosn = posn.move(-1);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(1, 0, Orientation.WEST), newPosn);
		newPosn = posn.move(-2);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(2, 0, Orientation.WEST), newPosn);
	}

	@Test
	public final void testRotate() {
		RoverPosition posn = new RoverPosition(0, 0, Orientation.NORTH);
		RoverPosition newPosn = posn.rotate(0);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(posn, newPosn);
		newPosn = posn.rotate(1);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), newPosn);
		newPosn = posn.rotate(2);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), newPosn);
		newPosn = posn.rotate(3);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), newPosn);
		newPosn = posn.rotate(4);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), newPosn);
		newPosn = posn.rotate(5);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), newPosn);
		newPosn = posn.rotate(6);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), newPosn);
		newPosn = posn.rotate(7);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), newPosn);
		newPosn = posn.rotate(8);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), newPosn);
		newPosn = posn.rotate(-1);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), newPosn);
		newPosn = posn.rotate(-2);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), newPosn);
		newPosn = posn.rotate(-3);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), newPosn);
		newPosn = posn.rotate(-4);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), newPosn);
		newPosn = posn.rotate(-5);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), newPosn);
		newPosn = posn.rotate(-6);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), newPosn);
		newPosn = posn.rotate(-7);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), newPosn);
		newPosn = posn.rotate(-8);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), newPosn);

		posn = new RoverPosition(0, 0, Orientation.EAST);
		newPosn = posn.rotate(0);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(posn, newPosn);
		newPosn = posn.rotate(1);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), newPosn);
		newPosn = posn.rotate(2);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), newPosn);
		newPosn = posn.rotate(3);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), newPosn);
		newPosn = posn.rotate(4);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), newPosn);
		newPosn = posn.rotate(5);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), newPosn);
		newPosn = posn.rotate(6);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), newPosn);
		newPosn = posn.rotate(7);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), newPosn);
		newPosn = posn.rotate(8);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), newPosn);
		newPosn = posn.rotate(-1);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), newPosn);
		newPosn = posn.rotate(-2);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), newPosn);
		newPosn = posn.rotate(-3);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), newPosn);
		newPosn = posn.rotate(-4);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), newPosn);
		newPosn = posn.rotate(-5);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), newPosn);
		newPosn = posn.rotate(-6);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), newPosn);
		newPosn = posn.rotate(-7);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), newPosn);
		newPosn = posn.rotate(-8);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), newPosn);

		posn = new RoverPosition(0, 0, Orientation.SOUTH);
		newPosn = posn.rotate(0);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(posn, newPosn);
		newPosn = posn.rotate(1);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), newPosn);
		newPosn = posn.rotate(2);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), newPosn);
		newPosn = posn.rotate(3);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), newPosn);
		newPosn = posn.rotate(4);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), newPosn);
		newPosn = posn.rotate(5);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), newPosn);
		newPosn = posn.rotate(6);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), newPosn);
		newPosn = posn.rotate(7);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), newPosn);
		newPosn = posn.rotate(8);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), newPosn);
		newPosn = posn.rotate(-1);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), newPosn);
		newPosn = posn.rotate(-2);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), newPosn);
		newPosn = posn.rotate(-3);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), newPosn);
		newPosn = posn.rotate(-4);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), newPosn);
		newPosn = posn.rotate(-5);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), newPosn);
		newPosn = posn.rotate(-6);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), newPosn);
		newPosn = posn.rotate(-7);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), newPosn);
		newPosn = posn.rotate(-8);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), newPosn);

		posn = new RoverPosition(0, 0, Orientation.WEST);
		newPosn = posn.rotate(0);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(posn, newPosn);
		newPosn = posn.rotate(1);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), newPosn);
		newPosn = posn.rotate(2);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), newPosn);
		newPosn = posn.rotate(3);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), newPosn);
		newPosn = posn.rotate(4);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), newPosn);
		newPosn = posn.rotate(5);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), newPosn);
		newPosn = posn.rotate(6);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), newPosn);
		newPosn = posn.rotate(7);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), newPosn);
		newPosn = posn.rotate(8);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), newPosn);
		newPosn = posn.rotate(-1);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), newPosn);
		newPosn = posn.rotate(-2);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), newPosn);
		newPosn = posn.rotate(-3);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), newPosn);
		newPosn = posn.rotate(-4);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), newPosn);
		newPosn = posn.rotate(-5);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.SOUTH), newPosn);
		newPosn = posn.rotate(-6);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.EAST), newPosn);
		newPosn = posn.rotate(-7);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.NORTH), newPosn);
		newPosn = posn.rotate(-8);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), posn);
		assertEquals(new RoverPosition(0, 0, Orientation.WEST), newPosn);
	}
}
